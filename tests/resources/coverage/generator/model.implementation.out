/* The content of this file was generated using a modified C profile of libCellML 0.4.0. */

double xor(double x, double y)
{
    return (x != 0.0) ^ (y != 0.0);
}

double min(double x, double y)
{
    return (x < y)?x:y;
}

double max(double x, double y)
{
    return (x > y)?x:y;
}

double sec(double x)
{
    return 1.0/cos(x);
}

double csc(double x)
{
    return 1.0/sin(x);
}

double cot(double x)
{
    return 1.0/tan(x);
}

double sech(double x)
{
    return 1.0/cosh(x);
}

double csch(double x)
{
    return 1.0/sinh(x);
}

double coth(double x)
{
    return 1.0/tanh(x);
}

double asec(double x)
{
    return acos(1.0/x);
}

double acsc(double x)
{
    return asin(1.0/x);
}

double acot(double x)
{
    return atan(1.0/x);
}

double asech(double x)
{
    double oneOverX = 1.0/x;

    return log(oneOverX+sqrt(oneOverX*oneOverX-1.0));
}

double acsch(double x)
{
    double oneOverX = 1.0/x;

    return log(oneOverX+sqrt(oneOverX*oneOverX+1.0));
}

double acoth(double x)
{
    double oneOverX = 1.0/x;

    return 0.5*log((1.0+oneOverX)/(1.0-oneOverX));
}

double * createStatesArray()
{
    return (double *) malloc(STATE_COUNT*sizeof(double));
}

double * createVariablesArray()
{
    return (double *) malloc(VARIABLE_COUNT*sizeof(double));
}

void deleteArray(double *array)
{
    free(array);
}

void initialiseVariables(double *states, double *variables)
{
    variables[1] = 1.0;
    variables[2] = 2.0;
    variables[6] = 3.0;
    variables[18] = 4.0;
    variables[177] = 5.0;
    variables[178] = 6.0;
    variables[180] = 7.0;
    variables[182] = 123.0;
    variables[183] = 123.456789;
    variables[184] = 123.0e99;
    variables[185] = 123.456789e99;
    variables[187] = 1.0;
    variables[188] = 0.0;
    variables[189] = 2.71828182845905;
    variables[190] = 3.14159265358979;
    variables[191] = INFINITY;
    variables[192] = NAN;
    states[0] = 0.0;
}

void computeComputedConstants(double *variables)
{
    variables[0] = eq(variables[1], variables[2]);
    variables[3] = variables[1]/eq(variables[2], variables[2]);
    variables[4] = neq(variables[1], variables[2]);
    variables[5] = variables[1]/neq(variables[2], variables[6]);
    variables[7] = lt(variables[1], variables[2]);
    variables[8] = variables[1]/lt(variables[2], variables[6]);
    variables[9] = leq(variables[1], variables[2]);
    variables[10] = variables[1]/leq(variables[2], variables[6]);
    variables[11] = gt(variables[1], variables[2]);
    variables[12] = variables[1]/gt(variables[2], variables[6]);
    variables[13] = geq(variables[1], variables[2]);
    variables[14] = variables[1]/geq(variables[2], variables[6]);
    variables[15] = and(variables[1], variables[2]);
    variables[16] = and(variables[1], and(variables[2], variables[6]));
    variables[17] = and(lt(variables[1], variables[2]), gt(variables[6], variables[18]));
    variables[19] = and(variables[1]+variables[2], gt(variables[6], variables[18]));
    variables[20] = and(variables[1], gt(variables[2], variables[6]));
    variables[21] = and(variables[1]-variables[2], gt(variables[6], variables[18]));
    variables[22] = and(-variables[1], gt(variables[2], variables[6]));
    variables[23] = and(pow(variables[1], variables[2]), gt(variables[6], variables[18]));
    variables[24] = and(pow(variables[1], 1.0/variables[2]), gt(variables[6], variables[18]));
    variables[25] = and(lt(variables[1], variables[2]), variables[6]+variables[18]);
    variables[26] = and(lt(variables[1], variables[2]), variables[6]);
    variables[27] = and(lt(variables[1], variables[2]), variables[6]-variables[18]);
    variables[28] = and(lt(variables[1], variables[2]), -variables[6]);
    variables[29] = and(lt(variables[1], variables[2]), pow(variables[6], variables[18]));
    variables[30] = and(lt(variables[1], variables[2]), pow(variables[6], 1.0/variables[18]));
    variables[31] = variables[1]/and(variables[2], variables[6]);
    variables[32] = or(variables[1], variables[2]);
    variables[33] = or(variables[1], or(variables[2], variables[6]));
    variables[34] = or(lt(variables[1], variables[2]), gt(variables[6], variables[18]));
    variables[35] = or(variables[1]+variables[2], gt(variables[6], variables[18]));
    variables[36] = or(variables[1], gt(variables[2], variables[6]));
    variables[37] = or(variables[1]-variables[2], gt(variables[6], variables[18]));
    variables[38] = or(-variables[1], gt(variables[2], variables[6]));
    variables[39] = or(pow(variables[1], variables[2]), gt(variables[6], variables[18]));
    variables[40] = or(pow(variables[1], 1.0/variables[2]), gt(variables[6], variables[18]));
    variables[41] = or(lt(variables[1], variables[2]), variables[6]+variables[18]);
    variables[42] = or(lt(variables[1], variables[2]), variables[6]);
    variables[43] = or(lt(variables[1], variables[2]), variables[6]-variables[18]);
    variables[44] = or(lt(variables[1], variables[2]), -variables[6]);
    variables[45] = or(lt(variables[1], variables[2]), pow(variables[6], variables[18]));
    variables[46] = or(lt(variables[1], variables[2]), pow(variables[6], 1.0/variables[18]));
    variables[47] = variables[1]/or(variables[2], variables[6]);
    variables[48] = xor(variables[1], variables[2]);
    variables[49] = xor(variables[1], xor(variables[2], variables[6]));
    variables[50] = xor(lt(variables[1], variables[2]), gt(variables[6], variables[18]));
    variables[51] = xor(variables[1]+variables[2], gt(variables[6], variables[18]));
    variables[52] = xor(variables[1], gt(variables[2], variables[6]));
    variables[53] = xor(variables[1]-variables[2], gt(variables[6], variables[18]));
    variables[54] = xor(-variables[1], gt(variables[2], variables[6]));
    variables[55] = xor(pow(variables[1], variables[2]), gt(variables[6], variables[18]));
    variables[56] = xor(pow(variables[1], 1.0/variables[2]), gt(variables[6], variables[18]));
    variables[57] = xor(lt(variables[1], variables[2]), variables[6]+variables[18]);
    variables[58] = xor(lt(variables[1], variables[2]), variables[6]);
    variables[59] = xor(lt(variables[1], variables[2]), variables[6]-variables[18]);
    variables[60] = xor(lt(variables[1], variables[2]), -variables[6]);
    variables[61] = xor(lt(variables[1], variables[2]), pow(variables[6], variables[18]));
    variables[62] = xor(lt(variables[1], variables[2]), pow(variables[6], 1.0/variables[18]));
    variables[63] = variables[1]/xor(variables[2], variables[6]);
    variables[64] = not(variables[1]);
    variables[65] = variables[1]+variables[2];
    variables[66] = variables[1]+variables[2]+variables[6];
    variables[67] = lt(variables[1], variables[2])+gt(variables[6], variables[18]);
    variables[68] = variables[1];
    variables[69] = variables[1]-variables[2];
    variables[70] = lt(variables[1], variables[2])-gt(variables[6], variables[18]);
    variables[71] = lt(variables[1], variables[2])-(variables[6]+variables[18]);
    variables[72] = lt(variables[1], variables[2])-variables[6];
    variables[73] = -variables[1];
    variables[74] = -lt(variables[1], variables[2]);
    variables[75] = variables[1]*variables[2];
    variables[76] = variables[1]*variables[2]*variables[6];
    variables[77] = lt(variables[1], variables[2])*gt(variables[6], variables[18]);
    variables[78] = (variables[1]+variables[2])*gt(variables[6], variables[18]);
    variables[79] = variables[1]*gt(variables[2], variables[6]);
    variables[80] = (variables[1]-variables[2])*gt(variables[6], variables[18]);
    variables[81] = -variables[1]*gt(variables[2], variables[6]);
    variables[82] = lt(variables[1], variables[2])*(variables[6]+variables[18]);
    variables[83] = lt(variables[1], variables[2])*variables[6];
    variables[84] = lt(variables[1], variables[2])*(variables[6]-variables[18]);
    variables[85] = lt(variables[1], variables[2])*-variables[6];
    variables[86] = variables[1]/variables[2];
    variables[87] = lt(variables[1], variables[2])/gt(variables[18], variables[6]);
    variables[88] = (variables[1]+variables[2])/gt(variables[18], variables[6]);
    variables[89] = variables[1]/gt(variables[6], variables[2]);
    variables[90] = (variables[1]-variables[2])/gt(variables[18], variables[6]);
    variables[91] = -variables[1]/gt(variables[6], variables[2]);
    variables[92] = lt(variables[1], variables[2])/(variables[6]+variables[18]);
    variables[93] = lt(variables[1], variables[2])/variables[6];
    variables[94] = lt(variables[1], variables[2])/(variables[6]-variables[18]);
    variables[95] = lt(variables[1], variables[2])/-variables[6];
    variables[96] = lt(variables[1], variables[2])/(variables[6]*variables[18]);
    variables[97] = lt(variables[1], variables[2])/(variables[6]/variables[18]);
    variables[98] = sqrt(variables[1]);
    variables[99] = pow(variables[1], 2.0);
    variables[100] = pow(variables[1], 3.0);
    variables[101] = pow(variables[1], variables[2]);
    variables[102] = pow(leq(variables[1], variables[2]), geq(variables[6], variables[18]));
    variables[103] = pow(variables[1]+variables[2], geq(variables[6], variables[18]));
    variables[104] = pow(variables[1], geq(variables[2], variables[6]));
    variables[105] = pow(variables[1]-variables[2], geq(variables[6], variables[18]));
    variables[106] = pow(-variables[1], geq(variables[2], variables[6]));
    variables[107] = pow(variables[1]*variables[2], geq(variables[6], variables[18]));
    variables[108] = pow(variables[1]/variables[2], geq(variables[6], variables[18]));
    variables[109] = pow(leq(variables[1], variables[2]), variables[6]+variables[18]);
    variables[110] = pow(leq(variables[1], variables[2]), variables[6]);
    variables[111] = pow(leq(variables[1], variables[2]), variables[6]-variables[18]);
    variables[112] = pow(leq(variables[1], variables[2]), -variables[6]);
    variables[113] = pow(leq(variables[1], variables[2]), variables[6]*variables[18]);
    variables[114] = pow(leq(variables[1], variables[2]), variables[6]/variables[18]);
    variables[115] = pow(leq(variables[1], variables[2]), pow(variables[6], variables[18]));
    variables[116] = pow(leq(variables[1], variables[2]), pow(variables[6], 1.0/variables[18]));
    variables[117] = sqrt(variables[1]);
    variables[118] = sqrt(variables[1]);
    variables[119] = pow(variables[1], 1.0/3.0);
    variables[120] = pow(variables[1], 1.0/variables[2]);
    variables[121] = pow(lt(variables[1], variables[2]), 1.0/gt(variables[18], variables[6]));
    variables[122] = pow(variables[1]+variables[2], 1.0/gt(variables[18], variables[6]));
    variables[123] = pow(variables[1], 1.0/gt(variables[6], variables[2]));
    variables[124] = pow(variables[1]-variables[2], 1.0/gt(variables[18], variables[6]));
    variables[125] = pow(-variables[1], 1.0/gt(variables[6], variables[2]));
    variables[126] = pow(variables[1]*variables[2], 1.0/gt(variables[18], variables[6]));
    variables[127] = pow(variables[1]/variables[2], 1.0/gt(variables[18], variables[6]));
    variables[128] = pow(lt(variables[1], variables[2]), 1.0/(variables[6]+variables[18]));
    variables[129] = pow(lt(variables[1], variables[2]), 1.0/variables[6]);
    variables[130] = pow(lt(variables[1], variables[2]), 1.0/(variables[6]-variables[18]));
    variables[131] = pow(lt(variables[1], variables[2]), 1.0/-variables[6]);
    variables[132] = pow(lt(variables[1], variables[2]), 1.0/(variables[6]*variables[18]));
    variables[133] = pow(lt(variables[1], variables[2]), 1.0/(variables[6]/variables[18]));
    variables[134] = pow(lt(variables[1], variables[2]), 1.0/pow(variables[6], variables[18]));
    variables[135] = pow(lt(variables[1], variables[2]), 1.0/pow(variables[6], 1.0/variables[18]));
    variables[136] = fabs(variables[1]);
    variables[137] = exp(variables[1]);
    variables[138] = log(variables[1]);
    variables[139] = log10(variables[1]);
    variables[140] = log(variables[1])/log(2.0);
    variables[141] = log10(variables[1]);
    variables[142] = log(variables[1])/log(variables[2]);
    variables[143] = ceil(variables[1]);
    variables[144] = floor(variables[1]);
    variables[145] = min(variables[1], variables[2]);
    variables[146] = min(variables[1], min(variables[2], variables[6]));
    variables[147] = max(variables[1], variables[2]);
    variables[148] = max(variables[1], max(variables[2], variables[6]));
    variables[149] = fmod(variables[1], variables[2]);
    variables[150] = sin(variables[1]);
    variables[151] = cos(variables[1]);
    variables[152] = tan(variables[1]);
    variables[153] = sec(variables[1]);
    variables[154] = csc(variables[1]);
    variables[155] = cot(variables[1]);
    variables[156] = sinh(variables[1]);
    variables[157] = cosh(variables[1]);
    variables[158] = tanh(variables[1]);
    variables[159] = sech(variables[1]);
    variables[160] = csch(variables[1]);
    variables[161] = coth(variables[1]);
    variables[162] = asin(variables[1]);
    variables[163] = acos(variables[1]);
    variables[164] = atan(variables[1]);
    variables[165] = asec(variables[1]);
    variables[166] = acsc(variables[1]);
    variables[167] = acot(variables[1]);
    variables[168] = asinh(variables[1]);
    variables[169] = acosh(variables[1]);
    variables[170] = atanh(variables[1]/2.0);
    variables[171] = asech(variables[1]);
    variables[172] = acsch(variables[1]);
    variables[173] = acoth(2.0*variables[1]);
    variables[174] = (gt(variables[1], variables[2]))?variables[1]:NAN;
    variables[175] = (gt(variables[1], variables[2]))?variables[1]:variables[6];
    variables[176] = (gt(variables[1], variables[2]))?variables[1]:(gt(variables[6], variables[18]))?variables[6]:(gt(variables[177], variables[178]))?variables[177]:NAN;
    variables[179] = (gt(variables[1], variables[2]))?variables[1]:(gt(variables[6], variables[18]))?variables[6]:(gt(variables[177], variables[178]))?variables[177]:variables[180];
    variables[181] = 123.0+((gt(variables[1], variables[2]))?variables[1]:NAN);
    variables[186] = variables[1];
    variables[193] = and(variables[1], variables[2])+((gt(variables[6], variables[18]))?variables[2]:NAN)+variables[177]+and(variables[178], variables[180]);
    variables[194] = and(variables[1], variables[2])-(((gt(variables[6], variables[18]))?variables[2]:NAN)-(variables[177]-((gt(variables[6], variables[18]))?variables[2]:NAN)))-and(variables[178], variables[180]);
    variables[195] = and(variables[1], variables[2])*((gt(variables[6], variables[18]))?variables[2]:NAN)*variables[177]*((gt(variables[6], variables[18]))?variables[2]:NAN)*and(variables[178], variables[180]);
    variables[196] = and(variables[1], variables[2])/(((gt(variables[6], variables[18]))?variables[2]:NAN)/(variables[177]/((gt(variables[6], variables[18]))?variables[2]:NAN)));
    variables[197] = and(or(variables[1], variables[2]), and(xor(variables[1], variables[2]), and((gt(variables[6], variables[18]))?variables[2]:NAN, and(and(and(variables[177], (gt(variables[6], variables[18]))?variables[2]:NAN), xor(variables[1], variables[2])), or(variables[1], variables[2])))));
    variables[198] = or(and(variables[1], variables[2]), or(xor(variables[1], variables[2]), or((gt(variables[6], variables[18]))?variables[2]:NAN, or(or(or(variables[177], (gt(variables[6], variables[18]))?variables[2]:NAN), xor(variables[1], variables[2])), and(variables[1], variables[2])))));
    variables[199] = xor(and(variables[1], variables[2]), xor(or(variables[1], variables[2]), xor((gt(variables[6], variables[18]))?variables[2]:NAN, xor(xor(xor(variables[177], (gt(variables[6], variables[18]))?variables[2]:NAN), or(variables[1], variables[2])), and(variables[1], variables[2])))));
    variables[200] = pow(and(variables[1], variables[2]), pow((gt(variables[6], variables[18]))?variables[2]:NAN, pow(pow(variables[177], (gt(variables[6], variables[18]))?variables[2]:NAN), and(variables[1], variables[2]))));
    variables[201] = pow(pow(pow(and(variables[1], variables[2]), 1.0/pow((gt(variables[6], variables[18]))?variables[2]:NAN, 1.0/variables[177])), 1.0/((gt(variables[6], variables[18]))?variables[2]:NAN)), 1.0/and(variables[1], variables[2]));
    variables[202] = -and(variables[1], variables[2])+-((gt(variables[6], variables[18]))?variables[2]:NAN);
}

void computeRates(double voi, double *states, double *rates, double *variables)
{
    rates[0] = 1.0;
}

void computeVariables(double voi, double *states, double *rates, double *variables)
{
}
