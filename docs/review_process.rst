.. _review_process:

==============
Review process
==============

This chapter details the responsibilities of the repository owners, and will help contributors to understand how their code contributions will be assessed and reviewed.

Check for the green tick
========================
Before accepting a tranche of work into the libCellML prime repository check that the :libcellml_buildbot:`libCellML Buildbot<>` has tested and passed the code.
The status of the code is shown in the last commit of a pushed group of commits in the pull request.
The last commit will have a red cross for a failed build or a green tick for a passed build.
Obviously, make sure that the last commit has a green tick before merging.

The "Details" link at the bottom of the pull request web page will take you to the build records of the library.
This page shows the results of the unit tests for each target operating system, the results of the coverage test, the results of the memory check test, and the results of the documentation build.

The coverage statistics for the library (generated from :gcovr:`gcovr<>` ) can be reached through the :ref:`Coverage Statistics <coverage_statistics>` page.

Read the documentation
======================

**TODO** Update needed now that documentation is integrated into libcellml.org.

The documentation for the project is built as part of the testing process.

The Documentation Builder link (entry 2 in step 5) will take you to the build for the documentation.
On this page, you can see the steps taken to build the documentation.
In the last step of the build (step 7), there is a link 'dox' (entry 2) that will take you to the built documentation.

The documentation should be reviewed in its final format particularly those parts of the documentation that (should) have changed due to the current pull request.
The API documentation (generated by :doxygen:`Doxygen<>`) can be reached from the :api:`API Documentation<>` pages.
Note that it may be some time before changes to the documentation are seen on that site, as there is currently not a live connection between the repository and the API documentation on this website.

Resolving comments
==================
All comments on the pull request and associated issue should be responded to and satisfied.
It's useful if contributors include the Git commit number (a six or seven digit hexadecimal code) in which any requested code changes are made in their reply to reviewer comments.
It is the reviewers' responsibility to check that appropriate changes have been made before merging the pull request.

Coding standards
================
Currently, there is no fully-defined libCellML coding standards set, but the :google_style_guide:`Google C++ Style Guide<>` can be considered a baseline for the standard of code that is expected for libCellML.
See the :ref:`Coding Standards <coding_standards>` document for deviations from this guideline.

Merging a pull request
======================

.. note::

  Caution: before merging a pull request make sure that a release is not currently in progress.
  If a release is in progress, the prime repository will have a branch called *release_staging_<version number>* (where <version number> is a semantic version number).

When merging a pull request, the reviewer should add a comment so that the corresponding issue is closed.
This can be done by adding a directive to the merge commit, like so::

  closes #123

where the numeral corresponds to the issue that needs to be closed.
You can use other closing directives that will achieve the same outcome, please see :github_help:`the Github article for a list of all directives </articles/closing-issues-via-commit-messages/>` that will work on Github.
