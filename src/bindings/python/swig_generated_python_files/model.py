# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _model
else:
    import _model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.componententity
import libcellml.importedentity
import libcellml.namedentity
import libcellml.entity
class Model(libcellml.componententity.ComponentEntity):
    r"""Represents a CellML model."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _model.delete_Model

    def __init__(self, *args):
        _model.Model_swiginit(self, _model.new_Model(*args))

    def addUnits(self, units):
        r"""Add a copy of the given Units to this model."""
        return _model.Model_addUnits(self, units)

    def removeAllUnits(self):
        r"""Removes all units stored in this model."""
        return _model.Model_removeAllUnits(self)

    def hasUnits(self, *args):
        r"""Tests to see if this model has the given units, specified by name."""
        return _model.Model_hasUnits(self, *args)

    def unitsCount(self):
        r"""Returns the number of units this model contains."""
        return _model.Model_unitsCount(self)

    def resolveImports(self, baseFile):
        r"""
        Resolves all imports in this model.

        Resolves all :class:`Component` and :class:`Units` imports by loading the
        models from local disk through relative urls. The ``baseFile`` is used to
        determine the full path to the source model relative to this one.
        """
        return _model.Model_resolveImports(self, baseFile)

    def hasUnresolvedImports(self):
        r"""Tests if this model has unresolved imports."""
        return _model.Model_hasUnresolvedImports(self)

    def removeUnits(self, *args):
        r"""
        Removes the Units specified by index, name or Units object.

        Only the first matching Units is removed.

        Returns `True` on success.
        """
        return _model.Model_removeUnits(self, *args)

    def getUnits(self, *args):
        r"""
        Returns a Units object from this Model, specified by index or name.

        Only the first matching Units is returned.
        """
        return _model.Model_getUnits(self, *args)

    def takeUnits(self, *args):
        r"""
        Removes and returns the Units specified by index or name.

        Only the first matching Units is removed and returned.
        """
        return _model.Model_takeUnits(self, *args)

    def replaceUnits(self, *args):
        r"""
        Replaces a Units object, specified by index, name or Units object, by another
        Units (second argument).

        Only the first matching Units is replaced.

        Returns `True` on success.
        """
        return _model.Model_replaceUnits(self, *args)

# Register Model in _model:
_model.Model_swigregister(Model)



