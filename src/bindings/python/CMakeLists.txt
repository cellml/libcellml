# Copyright libCellML Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.cmake_minimum_required (VERSION 3.1)

if(IS_MULTI_CONFIG)
  set(_CFGDIR "/$<CONFIG>")
endif()

# Add swig interface files
# Note: These filenames double as (generated .so file) module names!
set(SWIG_INTERFACE_SRCS
    ../interface/component.i
    ../interface/componententity.i
    ../interface/error.i
    ../interface/entity.i
    ../interface/generator.i
    ../interface/generatorprofile.i
    ../interface/importsource.i
    ../interface/importedentity.i
    ../interface/logger.i
    ../interface/model.i
    ../interface/namedentity.i
    ../interface/parser.i
    ../interface/printer.i
    ../interface/reset.i
    ../interface/specificationrule.i
    ../interface/units.i
    ../interface/validator.i
    ../interface/variable.i
    ../interface/version.i
)

# Put the Intermediary files generated by SWIG into their own directory.
set(SWIG_GENERATED_INTERMEDIARIES_FILES_DIR ${CMAKE_CURRENT_BINARY_DIR}/swig_intermediaries)

# Set the location of the libcellml Python package directory.
set(LIBCELLML_PYTHON_PACKAGE_DIR ${CMAKE_CURRENT_BINARY_DIR}${_CFGDIR}/libcellml)
set(_SWIG_GENERATED_PYTHON_FILES_DIR ${CMAKE_CURRENT_BINARY_DIR}/swig_generated_python_files)
set(FINALISE_PYTHON_BINDINGS_ARGUMENTS -DLIBCELLML_PYTHON_PACKAGE_DIR=${LIBCELLML_PYTHON_PACKAGE_DIR})

# Configure for C++
if(${CMAKE_VERSION} VERSION_LESS 3.11)
  set_source_files_properties(${SWIG_INTERFACE_SRCS} PROPERTIES
    CPLUSPLUS ON
  )
  include_directories(${PROJECT_SOURCE_DIR}/src/api ${PROJECT_BINARY_DIR}/src/api)
  make_directory(${SWIG_GENERATED_INTERMEDIARIES_FILES_DIR})
else()
  set_source_files_properties(${SWIG_INTERFACE_SRCS} PROPERTIES
    CPLUSPLUS ON
    INCLUDE_DIRECTORIES "${PROJECT_SOURCE_DIR}/src/api;${PROJECT_BINARY_DIR}/src/api"
  )
endif()

set(SETUP_PY_PACKAGE_FILES "'\${TARGET_FILE_NAME_cellml}'")
list(APPEND FINALISE_PYTHON_BINDINGS_ARGUMENTS -DTARGET_FILE_NAME_cellml=$<TARGET_FILE_NAME:cellml>)
if (UNIX AND NOT APPLE)
  list(APPEND SETUP_PY_PACKAGE_FILES "'\${TARGET_SONAME_FILE_NAME_cellml}'")
  list(APPEND FINALISE_PYTHON_BINDINGS_ARGUMENTS -DTARGET_SONAME_FILE_NAME_cellml=$<TARGET_SONAME_FILE_NAME:cellml>)
  set(_GENERATOR_EXPRESSION_LIBCELLML_SONAME $<TARGET_SONAME_FILE:cellml>)
elseif(WIN32 AND HAVE_LIBXML2_CONFIG)
  list(APPEND SETUP_PY_PACKAGE_FILES "'\${TARGET_FILE_NAME_libxml2}'")
  list(APPEND FINALISE_PYTHON_BINDINGS_ARGUMENTS -DTARGET_FILE_NAME_libxml2=$<TARGET_FILE_NAME:xml2>)
  set(_GENERATOR_EXPRESSION_LIBXML2_FILE $<TARGET_FILE:xml2>)
endif ()

set(SWIG_PYTHON_BINDINGS_TARGETS)
# Create bindings for each interface file
foreach(SWIG_INTERFACE_SRC ${SWIG_INTERFACE_SRCS})
  get_filename_component(MODULE_TARGET ${SWIG_INTERFACE_SRC} NAME_WE)
  if(${CMAKE_VERSION} VERSION_LESS 3.13)
    set(CMAKE_SWIG_OUTDIR ${_SWIG_GENERATED_PYTHON_FILES_DIR})
    set(SWIG_OUTFILE_DIR ${SWIG_GENERATED_INTERMEDIARIES_FILES_DIR})
    swig_add_library(${MODULE_TARGET}
      LANGUAGE python
      SOURCES ${SWIG_INTERFACE_SRC}
    )
  else()
    swig_add_library(${MODULE_TARGET}
      LANGUAGE python
      OUTPUT_DIR ${_SWIG_GENERATED_PYTHON_FILES_DIR}
      OUTFILE_DIR ${SWIG_GENERATED_INTERMEDIARIES_FILES_DIR}
      SOURCES ${SWIG_INTERFACE_SRC}
    )
  endif()
  if(NOT POLICY CMP0078)
    set(MODULE_TARGET ${SWIG_MODULE_${MODULE_TARGET}_REAL_NAME})
  endif()
  target_link_libraries(${MODULE_TARGET} Python::Python cellml)
  # Disable use of Debug Python libraries when not present on Windows
  # See http://stackoverflow.com/questions/11311877/creating-a-dll-from-a-wrapped-cpp-file-with-swig
  if(WIN32)
    if(NOT PYTHON_DEBUG_LIBRARY)
      target_compile_definitions(${MODULE_TARGET} PRIVATE $<$<CONFIG:Debug>:SWIG_PYTHON_INTERPRETER_NO_DEBUG>)
    endif()
  endif()
  set_target_properties(${MODULE_TARGET} PROPERTIES
    CXX_VISIBILITY_PRESET hidden
    FOLDER bindings/python
    RUNTIME_OUTPUT_DIRECTORY ${LIBCELLML_PYTHON_PACKAGE_DIR}
    LIBRARY_OUTPUT_DIRECTORY ${LIBCELLML_PYTHON_PACKAGE_DIR}
  )
  list(APPEND SWIG_PYTHON_BINDINGS_TARGETS ${MODULE_TARGET})
  list(APPEND SETUP_PY_PACKAGE_FILES "'\${TARGET_FILE_NAME_${MODULE_TARGET}}'")
  list(APPEND FINALISE_PYTHON_BINDINGS_ARGUMENTS -DTARGET_FILE_NAME_${MODULE_TARGET}=$<TARGET_FILE_NAME:${MODULE_TARGET}>)
endforeach()

add_custom_target(python_bindings ALL DEPENDS ${SWIG_PYTHON_BINDINGS_TARGETS})

set(PYPI_PACKAGE_NAME libcellml)
set(SETUP_PY_PACKAGE_FILES_STR "${SETUP_PY_PACKAGE_FILES}")
string(REPLACE ";" ", " SETUP_PY_PACKAGE_FILES_STR "${SETUP_PY_PACKAGE_FILES_STR}")
set(SETUP_PRE_GEN_PY_FILE "${CMAKE_CURRENT_BINARY_DIR}/setup.pre_gen.py")
configure_file(setup.in.py ${SETUP_PRE_GEN_PY_FILE} @ONLY)

set(FINALISE_PYTHON_BINDINGS_SCRIPT ${CMAKE_CURRENT_BINARY_DIR}/finalise_python_package.cmake)
configure_file(${PROJECT_SOURCE_DIR}/cmake/finalise_python_package.in.cmake ${FINALISE_PYTHON_BINDINGS_SCRIPT} @ONLY)
add_custom_command(TARGET python_bindings POST_BUILD
  COMMAND ${CMAKE_COMMAND} ${FINALISE_PYTHON_BINDINGS_ARGUMENTS} -P ${FINALISE_PYTHON_BINDINGS_SCRIPT}
  COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:cellml> ${_GENERATOR_EXPRESSION_LIBCELLML_SONAME} ${_GENERATOR_EXPRESSION_LIBXML2_FILE} ${LIBCELLML_PYTHON_PACKAGE_DIR}
  COMMAND ${CMAKE_COMMAND} -E copy_directory ${_SWIG_GENERATED_PYTHON_FILES_DIR} ${LIBCELLML_PYTHON_PACKAGE_DIR}
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/__init__.py ${CMAKE_CURRENT_SOURCE_DIR}/README.rst ${SETUP_PRE_GEN_PY_FILE}
  COMMENT "Finalise preparation of libCellML Python bindings."
)

# Add new paths to make clean
set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES ${LIBCELLML_PYTHON_PACKAGE_DIR} ${SWIG_GENERATED_INTERMEDIARIES_FILES_DIR})
