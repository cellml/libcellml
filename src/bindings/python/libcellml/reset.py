# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _reset
else:
    import _reset

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.orderedentity
import libcellml.entity
class Reset(libcellml.orderedentity.OrderedEntity):
    r"""The Reset class is for describing a CellML reset."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _reset.delete_Reset

    def __init__(self, *args):
        _reset.Reset_swiginit(self, _reset.new_Reset(*args))

    def setVariable(self, variable):
        r"""Sets the :class: Variable for this reset."""
        return _reset.Reset_setVariable(self, variable)

    def getVariable(self):
        r"""Returns the :class: Variable of this reset."""
        return _reset.Reset_getVariable(self)

    def addWhen(self, when):
        r"""Add a copy of the given :class: When as a child When of this :class: Reset."""
        return _reset.Reset_addWhen(self, when)

    def removeAllWhens(self):
        r"""Clears all whens that have been added to this reset."""
        return _reset.Reset_removeAllWhens(self)

    def containsWhen(self, when):
        r"""
        Tests to see if the argument when pointer :param: when is contained
        within this When entity. Returns True if the when is in the reset
        entity and False otherwise.
        """
        return _reset.Reset_containsWhen(self, when)

    def whenCount(self):
        r"""Returns the number of whens the reset contains."""
        return _reset.Reset_whenCount(self)

    def getWhen(self, *args):
        r"""Returns a reference to a when at the given :param: index.  :param: index must be in the range [0, #whens)."""
        return _reset.Reset_getWhen(self, *args)

    def removeWhen(self, *args):
        r"""Remove the when with the given :param: index. :param: index must be in the range [0, #whens)."""
        return _reset.Reset_removeWhen(self, *args)

    def takeWhen(self, *args):
        r"""Removes the when at the given :param: index position and returns it. :param: index must be in the range [0, #Whens)."""
        return _reset.Reset_takeWhen(self, *args)

    def replaceWhen(self, *args):
        r"""Replaces the when at the :param: index with when :param: when. :param: index must be in the range [0, #whens)."""
        return _reset.Reset_replaceWhen(self, *args)

# Register Reset in _reset:
_reset.Reset_swigregister(Reset)



