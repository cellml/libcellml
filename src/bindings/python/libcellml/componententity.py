# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _componententity
else:
    import _componententity

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.importedentity
import libcellml.namedentity
import libcellml.entity
class ComponentEntity(libcellml.namedentity.NamedEntity):
    r"""Abstract class that provides component managing functionality."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _componententity.delete_ComponentEntity

    def __init__(self, *args):
        _componententity.ComponentEntity_swiginit(self, _componententity.new_ComponentEntity(*args))

    def addComponent(self, component):
        r"""
        Add a copy of the given component as a child component of this component
        entity.
        """
        return _componententity.ComponentEntity_addComponent(self, component)

    def removeAllComponents(self):
        r"""Removes all components that have been added to this entity."""
        return _componententity.ComponentEntity_removeAllComponents(self)

    def containsComponent(self, *args):
        r"""
        Tests if a component, specified by an index, name, or with a Component object,
         is contained within this entity.

        A second argument can be given to specify whether or not child components
        should be searched for the component to remove.
        """
        return _componententity.ComponentEntity_containsComponent(self, *args)

    def componentCount(self):
        r"""Returns the number of components the component contains.  """
        return _componententity.ComponentEntity_componentCount(self)

    def setEncapsulationId(self, id):
        r"""
        Sets the encapsulation id for this entity.

        The encapsulation Id is placed on the XML element for this entity. For the
        :class:`Model` class this is the ``encapsulation`` element that is the root
        element for the model's structure.  For the :class:`Component` class this is
        the ``component_ref`` element that references the component it represents in
        the structure.
        """
        return _componententity.ComponentEntity_setEncapsulationId(self, id)

    def getEncapsulationId(self):
        r"""
        Returns the encapsulation id for this entity.

        The encapsulation Id is placed on the XML element for this entity. For the
        :class:`Model` class this is the ``encapsulation`` element that is the root
        element for the model's structure.  For the :class:`Component` class this is
        the ``component_ref`` element that references the component it represents in
        the structure.
        """
        return _componententity.ComponentEntity_getEncapsulationId(self)

    def getComponent(self, *args):
        r"""
        Returns a component, specified by an index or name.

        A second argument can be given to specify whether or not child components
        should be searched for the component to remove.

        Only the first matching component is returned.
        """
        return _componententity.ComponentEntity_getComponent(self, *args)

    def removeComponent(self, *args):
        r"""
        Removes a component, specified by an index, name, or with a Component object.

        A second argument can be given to specify whether or not child components
        should be searched for the component to remove.

        Only the first matching component is removed.

        Returns `True` on success.
        """
        return _componententity.ComponentEntity_removeComponent(self, *args)

    def takeComponent(self, *args):
        r"""
        Removes and returns a component, specified by an index or name.

        Only the first matching component is removed and  returned.
        """
        return _componententity.ComponentEntity_takeComponent(self, *args)

    def replaceComponent(self, *args):
        r"""
        Removes a component, specified by an index, name, or with a Component object,
        and replaces it with the given component object (second argument).

        A third argument can be given to specify whether or not child components
        should be searched for the component to remove.

        Only the first matching component is replaced.

        Returns `True` on success.
        """
        return _componententity.ComponentEntity_replaceComponent(self, *args)

# Register ComponentEntity in _componententity:
_componententity.ComponentEntity_swigregister(ComponentEntity)



