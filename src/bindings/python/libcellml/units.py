# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _units
else:
    import _units

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.enumerations
import libcellml.importedentity
import libcellml.namedentity
import libcellml.entity
class Units(libcellml.namedentity.NamedEntity, libcellml.importedentity.ImportedEntity):
    r"""Represents a CellML Units definition."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _units.delete_Units

    def __init__(self, *args):
        _units.Units_swiginit(self, _units.new_Units(*args))
    StandardUnit_AMPERE = _units.Units_StandardUnit_AMPERE
    StandardUnit_BECQUEREL = _units.Units_StandardUnit_BECQUEREL
    StandardUnit_CANDELA = _units.Units_StandardUnit_CANDELA
    StandardUnit_COULOMB = _units.Units_StandardUnit_COULOMB
    StandardUnit_DIMENSIONLESS = _units.Units_StandardUnit_DIMENSIONLESS
    StandardUnit_FARAD = _units.Units_StandardUnit_FARAD
    StandardUnit_GRAM = _units.Units_StandardUnit_GRAM
    StandardUnit_GRAY = _units.Units_StandardUnit_GRAY
    StandardUnit_HENRY = _units.Units_StandardUnit_HENRY
    StandardUnit_HERTZ = _units.Units_StandardUnit_HERTZ
    StandardUnit_JOULE = _units.Units_StandardUnit_JOULE
    StandardUnit_KATAL = _units.Units_StandardUnit_KATAL
    StandardUnit_KELVIN = _units.Units_StandardUnit_KELVIN
    StandardUnit_KILOGRAM = _units.Units_StandardUnit_KILOGRAM
    StandardUnit_LITER = _units.Units_StandardUnit_LITER
    StandardUnit_LITRE = _units.Units_StandardUnit_LITRE
    StandardUnit_LUMEN = _units.Units_StandardUnit_LUMEN
    StandardUnit_LUX = _units.Units_StandardUnit_LUX
    StandardUnit_METER = _units.Units_StandardUnit_METER
    StandardUnit_METRE = _units.Units_StandardUnit_METRE
    StandardUnit_MOLE = _units.Units_StandardUnit_MOLE
    StandardUnit_NEWTON = _units.Units_StandardUnit_NEWTON
    StandardUnit_OHM = _units.Units_StandardUnit_OHM
    StandardUnit_PASCAL = _units.Units_StandardUnit_PASCAL
    StandardUnit_RADIAN = _units.Units_StandardUnit_RADIAN
    StandardUnit_SECOND = _units.Units_StandardUnit_SECOND
    StandardUnit_SIEMENS = _units.Units_StandardUnit_SIEMENS
    StandardUnit_SIEVERT = _units.Units_StandardUnit_SIEVERT
    StandardUnit_STERADIAN = _units.Units_StandardUnit_STERADIAN
    StandardUnit_TESLA = _units.Units_StandardUnit_TESLA
    StandardUnit_VOLT = _units.Units_StandardUnit_VOLT
    StandardUnit_WATT = _units.Units_StandardUnit_WATT
    StandardUnit_WEBER = _units.Units_StandardUnit_WEBER

    def isBaseUnit(self):
        r"""Tests if this is a base unit."""
        return _units.Units_isBaseUnit(self)

    def addUnit(self, *args):
        r"""
        Lets users add a Unit to this definition.

        Possible signatures:

         - addUnit(reference, prefix, exponent=1, multiplier=1)
         - addUnit(reference, exponent)
         - addUnit(reference)

        where `reference` can be a string or a StandardUnits. And `prefix` can be a
        string or Prefix.

        In addition, there's a signature

         - addUnit(reference, prefix, exponent, multiplier=1)

        where `prefix` is also allowed to be a float.
        """
        return _units.Units_addUnit(self, *args)

    def getUnitAttributes(self, *args):
        r"""
        Returns the attributes of the unit specified by index, reference, or
        StandardUnit.
        """
        return _units.Units_getUnitAttributes(self, *args)

    def removeAllUnits(self):
        r"""Remove all units stored in this Units object. """
        return _units.Units_removeAllUnits(self)

    def setSourceUnits(self, importSource, name):
        r"""
        Makes this Units an imported units by defining an `ImportSource` from which to
        extract the units with the given `name`.
        """
        return _units.Units_setSourceUnits(self, importSource, name)

    def unitCount(self):
        r"""Returns the number of units contained by this units object."""
        return _units.Units_unitCount(self)

    def removeUnit(self, *args):
        r"""
        Removes the unit specified by index, reference, or StandardUnit.

        Only the first matching unit is removed.

        `True` is returned on success.
        """
        return _units.Units_removeUnit(self, *args)

# Register Units in _units:
_units.Units_swigregister(Units)



