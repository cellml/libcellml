
# include <emscripten/bind.h>

# include "libcellml/annotator.h"

using namespace emscripten;

EMSCRIPTEN_BINDINGS(libcellml_annotator)
{
    class_<libcellml::Annotator>("Annotator")
        .smart_ptr_constructor("Annotator", &libcellml::Annotator::create)
        .function("setModel", &libcellml::Annotator::setModel)
        .function("modelByXXX", select_overload<libcellml::ModelPtr() const>(&libcellml::Annotator::model))
        .function("modelById", select_overload<libcellml::ModelPtr(const std::string &, size_t)>(&libcellml::Annotator::model))
        .function("modelById", select_overload<libcellml::ModelPtr(const std::string &)>(&libcellml::Annotator::model))
        .function("itemById", select_overload<libcellml::AnyItem(const std::string &)>(&libcellml::Annotator::item))
        .function("itemById", select_overload<libcellml::AnyItem(const std::string &, size_t)>(&libcellml::Annotator::item))
        .function("componentById", select_overload<libcellml::ComponentPtr(const std::string &, size_t)>(&libcellml::Annotator::component))
        .function("componentById", select_overload<libcellml::ComponentPtr(const std::string &)>(&libcellml::Annotator::component))
        .function("componentRefById", select_overload<libcellml::ComponentPtr(const std::string &, size_t)>(&libcellml::Annotator::componentRef))
        .function("componentRefById", select_overload<libcellml::ComponentPtr(const std::string &)>(&libcellml::Annotator::componentRef))
        .function("encapsulationById", select_overload<libcellml::ModelPtr(const std::string &, size_t)>(&libcellml::Annotator::encapsulation))
        .function("encapsulationById", select_overload<libcellml::ModelPtr(const std::string &)>(&libcellml::Annotator::encapsulation))
        .function("variableById", select_overload<libcellml::VariablePtr(const std::string &, size_t)>(&libcellml::Annotator::variable))
        .function("variableById", select_overload<libcellml::VariablePtr(const std::string &)>(&libcellml::Annotator::variable))
        .function("resetById", select_overload<libcellml::ResetPtr(const std::string &, size_t)>(&libcellml::Annotator::reset))
        .function("resetById", select_overload<libcellml::ResetPtr(const std::string &)>(&libcellml::Annotator::reset))
        .function("importSourceById", select_overload<libcellml::ImportSourcePtr(const std::string &, size_t)>(&libcellml::Annotator::importSource))
        .function("importSourceById", select_overload<libcellml::ImportSourcePtr(const std::string &)>(&libcellml::Annotator::importSource))
        .function("unitsById", select_overload<libcellml::UnitsPtr(const std::string &, size_t)>(&libcellml::Annotator::units))
        .function("unitsById", select_overload<libcellml::UnitsPtr(const std::string &)>(&libcellml::Annotator::units))
        .function("connectionById", select_overload<libcellml::VariablePairPtr(const std::string &, size_t)>(&libcellml::Annotator::connection))
        .function("connectionById", select_overload<libcellml::VariablePairPtr(const std::string &)>(&libcellml::Annotator::connection))
        .function("mapVariablesById", select_overload<libcellml::VariablePairPtr(const std::string &, size_t)>(&libcellml::Annotator::mapVariables))
        .function("mapVariablesById", select_overload<libcellml::VariablePairPtr(const std::string &)>(&libcellml::Annotator::mapVariables))
        .function("unitById", select_overload<libcellml::UnitPtr(const std::string &, size_t)>(&libcellml::Annotator::unit))
        .function("unitById", select_overload<libcellml::UnitPtr(const std::string &)>(&libcellml::Annotator::unit))
        .function("testValueById", select_overload<libcellml::ResetPtr(const std::string &, size_t)>(&libcellml::Annotator::testValue))
        .function("testValueById", select_overload<libcellml::ResetPtr(const std::string &)>(&libcellml::Annotator::testValue))
        .function("resetValueById", select_overload<libcellml::ResetPtr(const std::string &, size_t)>(&libcellml::Annotator::resetValue))
        .function("resetValueById", select_overload<libcellml::ResetPtr(const std::string &)>(&libcellml::Annotator::resetValue))
        .function("assignAllIdsByXXX", select_overload<bool()>(&libcellml::Annotator::assignAllIds))
        .function("assignAllIdsByModel", select_overload<bool(libcellml::ModelPtr &)>(&libcellml::Annotator::assignAllIds))
        .function("assignIds", &libcellml::Annotator::assignIds)
        .function("clearAllIdsByXXX", select_overload<void()>(&libcellml::Annotator::clearAllIds))
        .function("clearAllIdsByModel", select_overload<void(libcellml::ModelPtr &)>(&libcellml::Annotator::clearAllIds))
        .function("isUnique", &libcellml::Annotator::isUnique)
        .function("items", &libcellml::Annotator::items)
        .function("ids", &libcellml::Annotator::ids)
        .function("duplicateIds", &libcellml::Annotator::duplicateIds)
        .function("assignIdByItem", select_overload<std::string(const libcellml::AnyItem &)>(&libcellml::Annotator::assignId))
        .function("assignIdByModel", select_overload<std::string(const libcellml::ModelPtr &, libcellml::CellmlElementType)>(&libcellml::Annotator::assignId))
        .function("assignIdByComponent", select_overload<std::string(const libcellml::ComponentPtr &, libcellml::CellmlElementType)>(&libcellml::Annotator::assignId))
        .function("assignIdByImportSource", select_overload<std::string(const libcellml::ImportSourcePtr &)>(&libcellml::Annotator::assignId))
        .function("assignIdByReset", select_overload<std::string(const libcellml::ResetPtr &, libcellml::CellmlElementType)>(&libcellml::Annotator::assignId))
        .function("assignIdByUnits", select_overload<std::string(const libcellml::UnitsPtr &)>(&libcellml::Annotator::assignId))
        .function("assignIdByUnitItem", select_overload<std::string(const libcellml::UnitPtr &)>(&libcellml::Annotator::assignId))
        .function("assignIdByVariable", select_overload<std::string(const libcellml::VariablePtr &)>(&libcellml::Annotator::assignId))
        .function("assignIdByPair", select_overload<std::string(const libcellml::VariablePairPtr &, libcellml::CellmlElementType)>(&libcellml::Annotator::assignId))
        .function("assignIdByVariable", select_overload<std::string(const libcellml::VariablePtr &, const libcellml::VariablePtr &, libcellml::CellmlElementType)>(&libcellml::Annotator::assignId))
        .function("assignIdByUnits", select_overload<std::string(const libcellml::UnitsPtr &, size_t)>(&libcellml::Annotator::assignId))
        .function("assignComponentId", &libcellml::Annotator::assignComponentId)
        .function("assignComponentRefId", &libcellml::Annotator::assignComponentRefId)
        .function("assignConnectionId", &libcellml::Annotator::assignConnectionId)
        .function("assignEncapsulationId", &libcellml::Annotator::assignEncapsulationId)
        .function("assignImportSourceId", &libcellml::Annotator::assignImportSourceId)
        .function("assignMapVariablesId", &libcellml::Annotator::assignMapVariablesId)
        .function("assignModelId", &libcellml::Annotator::assignModelId)
        .function("assignResetId", &libcellml::Annotator::assignResetId)
        .function("assignResetValueId", &libcellml::Annotator::assignResetValueId)
        .function("assignTestValueId", &libcellml::Annotator::assignTestValueId)
        .function("assignUnitId", &libcellml::Annotator::assignUnitId)
        .function("assignUnitsId", &libcellml::Annotator::assignUnitsId)
        .function("assignVariableId", &libcellml::Annotator::assignVariableId)
        .function("itemCount", &libcellml::Annotator::itemCount)
        .function("hasModel", &libcellml::Annotator::hasModel)
    ;
}
